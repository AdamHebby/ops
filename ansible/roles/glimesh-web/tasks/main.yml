---

- name: set a hostname
  hostname:
    name: "{{ inventory_hostname }}"

- name: Ensure .ssh directory exists.
  file:
    dest: "/root/.ssh"
    mode: 0700
    owner: root
    state: directory

- name: Install ssh key
  copy:
    src: "glimesh-deploy"
    dest: "/root/.ssh/id_rsa"
    mode: 0600
    owner: root

- name: Trust GitHub
  shell: ssh-keyscan github.com >> ~/.ssh/known_hosts

# - name: install elixir
#   apt:
#     deb: https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb

# - name: install required packages
#   apt:
#     pkg:
#       - esl-erlang
#       - elixir
#       - npm
#       - git
#       - openssl
#       - imagemagick
#     state: present
#     update_cache: yes

- name: install hex
  command: mix local.hex --force

- name: install rebar
  command: mix local.rebar --force

- name: ensure tmp build dir exists
  file:
    path: /tmp/glimesh.tv
    state: directory

- name: download glimesh.tv
  git:
    repo: https://github.com/Glimesh/glimesh.tv.git
    dest: /tmp/glimesh.tv
    recursive: true
    update: true
    force: true
    version: "{{ glimesh_version }}"
  register: glimesh

- name: register short git hash version
  command: git rev-parse --short HEAD
  args:
    chdir: /tmp/glimesh.tv
  register: glimesh_git_hash

- name: change version
  lineinfile:
    path: /tmp/glimesh.tv/mix.exs
    regexp: '^\s+version: .*$'
    line: "version: \"0.1.0+{{ glimesh_git_hash.stdout }}\","

- set_fact:
    deploy_dest: "/opt/glimesh.tv-{{ glimesh_git_hash.stdout }}"

## Check we should deploy

- name: Get currently deployed hash
  stat:
    path: /opt/glimesh.tv
    follow: no
    get_checksum: no
  register: current_deploy

- name: Debug
  debug:
    var: current_deploy

- name: Same version deployed?
  pause:
    prompt: |
      WARNING: Latest version is already deployed.
      Pess Enter to continue
  delegate_to: localhost
  when: current_deploy.stat.lnk_target == deploy_dest
  register: same_deploy

## Build the deploy

- name: install mix dependencies
  command: mix do deps.get, deps.compile
  args:
    chdir: /tmp/glimesh.tv
  environment:
    MIX_ENV: prod
  # when: glimesh.changed

- name: install npm asset deps
  command: npm --prefix ./assets ci --progress=false --no-audit --loglevel=error
  args:
    chdir: /tmp/glimesh.tv
  # when: glimesh.changed

- name: build static assets
  command: npm run --prefix ./assets deploy
  args:
    chdir: /tmp/glimesh.tv
  # when: glimesh.changed

- name: digest static assets
  command: mix phx.digest
  args:
    chdir: /tmp/glimesh.tv
  # when: glimesh.changed

- name: build glimesh.tv
  command: mix do compile --force, release --force --overwrite
  args:
    chdir: /tmp/glimesh.tv
  environment:
    MIX_ENV: prod
  # when: glimesh.changed

- name: Ensure new directory exists
  file:
    path: "{{ deploy_dest }}"
    state: directory
    owner: nobody
    recurse: yes

- name: Copy newly built files to new host
  synchronize:
    src: /tmp/glimesh.tv/_build/prod
    dest: "{{ deploy_dest }}"
    links: yes
    delete: yes
  delegate_to: "{{ inventory_hostname }}"

- name: Check permissions
  file:
    path: "{{ deploy_dest }}"
    owner: nobody
    recurse: yes

## Change the service

- name: setup unit file for glimesh.tv
  template:
    src: glimesh.service.j2
    dest: /etc/systemd/system/glimesh.service
    mode: 644
  tags: config

- name: reload systemd immediately
  systemd:
    daemon_reload: yes

- name: gracefully shut down old glimesh app
  systemd:
    name: glimesh
    state: stopped

- name: Change the symlink
  file:
    src: "{{ deploy_dest }}"
    dest: /opt/glimesh.tv
    state: link
    owner: nobody
    force: yes

- name: start new glimesh app
  systemd:
    name: glimesh
    state: started

- name: wait for service to be online
  wait_for:
    port: 8080
    delay: 5

- name: pause to make sure the other node can take over
  pause:
    seconds: 15

- name: Cleanup old directories
  block:
    - name: Add a symlink to the old deploy for ease of rollback
      file:
        src: "{{ current_deploy.stat.lnk_target }}"
        dest: /opt/glimesh.tv-old
        state: link
        owner: nobody
        force: yes

    ## Cleanup
    - name: Find all deploy folders
      find:
        paths: /opt
        file_type: directory
        use_regex: yes
        patterns: "^glimesh.tv-([a-zA-Z0-9]+)$"
        recurse: no
      register: all_deploys

    - name: Delete old directories
      file:
        path: "{{ item }}"
        state: absent
        when: item != current_deploy.stat.lnk_target and item != deploy_dest
      with_items: "{{ all_deploys.files | map(attribute='path') | list }}"

  when: same_deploy is not defined
  tags:
    - cleanup
