---

- name: set a hostname
  hostname:
    name: "{{ inventory_hostname }}"

- name: Ensure .ssh directory exists.
  file:
    dest: "/root/.ssh"
    mode: 0700
    owner: root
    state: directory

- name: Install ssh key
  copy:
    src: "glimesh-deploy"
    dest: "/root/.ssh/id_rsa"
    mode: 0600
    owner: root

- name: Trust GitHub
  shell: ssh-keyscan github.com >> ~/.ssh/known_hosts

# - name: install elixir
#   apt:
#     deb: https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb

# - name: install required packages
#   apt:
#     pkg:
#       - esl-erlang
#       - elixir
#       - npm
#       - git
#       - openssl
#       - imagemagick
#     state: present
#     update_cache: yes

- name: install hex
  command: mix local.hex --force

- name: install rebar
  command: mix local.rebar --force

- name: ensure web_build_dir exists
  file:
    path: /tmp/glimesh.tv
    state: directory

- name: download glimesh.tv
  git:
    repo: https://github.com/Glimesh/glimesh.tv.git
    dest: /tmp/glimesh.tv
    recursive: true
    update: true
    force: true
    version: "{{ glimesh_version }}"
  register: glimesh

- name: register short git hash version
  command: git rev-parse --short HEAD
  args:
    chdir: /tmp/glimesh.tv
  register: glimesh_git_hash

- name: change version
  lineinfile:
    path: /tmp/glimesh.tv/mix.exs
    regexp: '^\s+version: .*$'
    line: "version: \"0.1.0+{{ glimesh_git_hash.stdout }}\","

- name: install mix dependencies
  command: mix do deps.get, deps.compile
  args:
    chdir: /tmp/glimesh.tv
  environment:
    MIX_ENV: prod
  # when: glimesh.changed

- name: install npm asset deps
  command: npm --prefix ./assets ci --progress=false --no-audit --loglevel=error
  args:
    chdir: /tmp/glimesh.tv
  # when: glimesh.changed

- name: build static assets
  command: npm run --prefix ./assets deploy
  args:
    chdir: /tmp/glimesh.tv
  # when: glimesh.changed

- name: digest static assets
  command: mix phx.digest
  args:
    chdir: /tmp/glimesh.tv
  # when: glimesh.changed

- name: build glimesh.tv
  command: mix do compile --force, release --force --overwrite
  args:
    chdir: /tmp/glimesh.tv
  environment:
    MIX_ENV: prod
  # when: glimesh.changed

- name: Ensure deploy state directories exist
  file:
    path: /opt/glimesh.tv-{{ item }}
    state: directory
    owner: nobody
    recurse: yes
  with_items:
    - "old"
    - "new"

- name: Copy currently live files to old directory
  synchronize:
    src: /opt/glimesh.tv
    dest: /opt/glimesh.tv-old
    links: yes

# Shouldn't we rsync?
- name: Copy newly built files to new store
  synchronize:
    src: /tmp/glimesh.tv/_build/prod
    dest: /opt/glimesh.tv-new
    links: yes

- name: permissions
  file:
    path: /opt/glimesh.tv-new
    owner: nobody
    recurse: yes

- name: setup unit file for glimesh.tv
  template:
    src: glimesh.service.j2
    dest: /etc/systemd/system/glimesh.service
    mode: 644
  tags: config

- name: reload systemd immediately
  systemd:
    daemon_reload: yes

- name: gracefully shut down old glimesh app
  systemd:
    name: glimesh
    state: stopped

- name: Change the symlink
  file:
    src: /opt/glimesh.tv-new
    dest: /opt/glimesh.tv
    state: link
    owner: nobody
    force: yes

- name: start new glimesh app
  systemd:
    name: glimesh
    state: started

- name: wait for service to be online
  wait_for:
    port: 8080
    delay: 5

- name: pause to make sure the other node can take over
  pause:
    seconds: 15
